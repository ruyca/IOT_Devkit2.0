#include <SoftwareSerial.h> //Para emular un puerto UART virtual

const uint8_t   SDW_SF       = 3;         // PIN SHUTDOWN DEL MÓDULO SFX
const uint8_t   TX_SFX       = 5;         // PIN TX DEL SOFTWARE SERIAL PARA WISOL
const uint8_t   RX_SFX       = 4;         // PIN RX DEL SOFTWARE SERIAL PARA WISOL
const int USER_BUTTON = 2;

const int pingPin = 13; // Trigger Pin of Ultrasonic Sensor
const int echoPin = 12; // Echo Pin of Ultrasonic Sensor
const int valorReal = 16; // Distancia real medida con la regla para calcular el porcentaje de error

String bufer; //variable donde guardaremos nuestro payload
String bufer2="\n";   //agregamos un salto de linea al final de nuestro payload
  
SoftwareSerial UART_SFX(RX_SFX, TX_SFX); // SIGFOX WISOL UART PARA DEBUG - RX, TX

void setup() {
   Serial.begin(9600); // Starting Serial Terminal
   UART_SFX.begin(9600); ///Inicializamos la comunicación serial virtual a 9600 bps
   Serial.println("PRACTICA 3 -  PRUEBA #1 (MEDICION MEDIA)");
   pinMode(USER_BUTTON, INPUT); //declaramos el pin como entrada digital
   pinMode(SDW_SF, OUTPUT);   //enable modulo wisol
}


void add_float(float var1) //funcion para agregar flotantes al payload
{
  byte* a1 = (byte*) &var1;    //convertimos el dato a bytes
  String str1;
  //agregamos al comando AT$SF= nuestra informacion a enviar
  for(int i=0;i<4;i++)
  {
    str1=String(a1[i], HEX);    //convertimos el valor hex a string 
    if(str1.length()<2)
    {
      bufer+=0+str1;    //si no, se agrega un cero
    }
    else
    {
      bufer+=str1;    //si esta completo, se copia tal cual
    }
  }
}

void tolerancia_y_error(float cm){
  float error, tolerancia; 
  Serial.print("Porcentaje de error: ");
  error = (abs(valorReal - cm) / valorReal)*100.0; // Porcentaje de error de la medicion
  Serial.print(error); 
  Serial.print(" %");
  tolerancia = abs(valorReal - cm); 
  Serial.print(" - Tolerancia ");
  Serial.print(tolerancia);
  Serial.print(" [cm] ");
  Serial.println();
}

void readDistance(){
   bufer="AT$SF=";
   long duration;
   float inches, cm;
   pinMode(pingPin, OUTPUT);
   digitalWrite(pingPin, LOW);
   delayMicroseconds(2);
   digitalWrite(pingPin, HIGH);
   delayMicroseconds(10);
   digitalWrite(pingPin, LOW);
   pinMode(echoPin, INPUT);
   duration = pulseIn(echoPin, HIGH);
   inches = microsecondsToInches(duration);
   cm = microsecondsToCentimeters(duration);
   add_float(cm);
   Serial.print(cm);
   Serial.print(" [cm] - ");
   Serial.print(inches);
   Serial.print(" [in]");
   Serial.println();
   tolerancia_y_error(cm);
   send_message(bufer);
   delay(250);
}

void loop() {
  if(!digitalRead(USER_BUTTON)){
    readDistance();
  }
}

float microsecondsToInches(long microseconds) {
   return microseconds / 74.0 / 2.0;
}

float microsecondsToCentimeters(long microseconds) {
   return microseconds / 29.0 / 2.0;
}


void send_message(String payload)
{
  Serial.println("Enviando el dato...");
  //agregamos el salto de linea "\n"
  bufer+=bufer2;
  //*******************
  //Habilitamos el modulo Sigfox
  digitalWrite(SDW_SF, HIGH);
  delay(1000);
  //Reset del canal para asegurar que manda en la frecuencia correcta
  UART_SFX.print("AT$RC\n"); 
  //************************
  //Enviamos la informacion por sigfox
  UART_SFX.print(bufer);
  delay(3000);
  //deshabilitamos el modulo Sigfox
  digitalWrite(SDW_SF, LOW);
  Serial.println("Dato enviado");
}
